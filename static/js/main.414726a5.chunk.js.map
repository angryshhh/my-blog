{"version":3,"sources":["components/profile_picture.jpg","components/github.svg","components/Markdown.tsx","components/BlogItem.tsx","components/BlogList.tsx","components/Profile.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","converter","Showdown","Converter","setFlavor","setOption","rootPath","window","location","pathname","indexOf","Markdown","fileName","useParams","useState","markdownText","setMarkdownText","useEffect","fetch","then","response","text","catch","err","console","log","document","title","split","querySelectorAll","forEach","block","hljs","highlightBlock","className","dangerouslySetInnerHTML","__html","makeHtml","BlogItem","props","history","useHistory","href","markdownInfo","onClick","e","preventDefault","push","slice","time","tags","map","tag","key","BlogList","pageCount","blogList","length","pageNum","setPageNum","blog","Profile","src","ProfilePicture","alt","GitHubIcon","App","Array","setBlogList","json","exact","path","children","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.414726a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile_picture.9efbd41e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/github.948de80e.svg\";","import React, { useState, useEffect } from 'react';\nimport Showdown from 'showdown';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/monokai.css';\nimport { useParams } from 'react-router-dom';\nimport './Markdown.css';\n\nconst converter = new Showdown.Converter();\nconverter.setFlavor('github');\nconverter.setOption('openLinksInNewWindow', true);\n\nconst rootPath = `/${window.location.pathname.indexOf('my-blog') > -1 ? 'my-blog/' : ''}`;\n\nconst Markdown: React.FC = () => {\n  let { fileName } = useParams();\n  const [markdownText, setMarkdownText] = useState('');\n  useEffect(() => {\n    fetch(`${rootPath}articles/${fileName}.md`)\n    .then(response => response.text())\n    .then(text => setMarkdownText(text))\n    .catch(err => console.log(err));\n\n    document.title = (fileName?.split('-')[1] || '') + ' - Trim Ryan';\n  }, [fileName]);\n\n  useEffect(() => {\n    document.querySelectorAll('pre code').forEach((block) => {\n      hljs.highlightBlock(block as HTMLElement);\n    });\n  });\n\n  return <div\n    className=\"markdown\"\n    dangerouslySetInnerHTML={{\n      __html: converter.makeHtml(markdownText),\n    }}\n  >\n  </div>;\n};\n\nexport default Markdown;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './BlogItem.css';\n\ninterface MarkdownInfo {\n  fileName: string;\n  time: string;\n  title: string;\n  tags: string[];\n}\n\ninterface Props {\n  markdownInfo: MarkdownInfo;\n}\n\nconst rootPath = `/${window.location.pathname.indexOf('my-blog') > -1 ? 'my-blog/' : ''}`;\n\nconst BlogItem: React.FC<Props> = (props) => {\n  let history = useHistory();\n\n  return <a\n    className=\"blog-item\"\n    href={props.markdownInfo.fileName}\n    onClick={e => {\n      e.preventDefault();\n      history.push(`${rootPath}${props.markdownInfo.fileName.slice(0, -3)}`);\n    }}\n  >\n    <span>{props.markdownInfo.title}</span>\n    <br />\n    <span>{props.markdownInfo.time}</span>\n    <br />\n    {\n      props.markdownInfo.tags.map(tag => <span key={tag}>üè∑{tag}</span>)\n    }\n  </a>;\n};\n\nexport default BlogItem;\n","import React, { useState } from 'react';\nimport BlogItem from './BlogItem';\nimport './BlogList.css';\n\ninterface MarkdownInfo {\n  fileName: string;\n  time: string;\n  title: string;\n  tags: string[];\n}\n\ninterface Props {\n  blogList: MarkdownInfo[];\n}\nconst pageSize = 7;\n\nconst BlogList: React.FC<Props> = (props: Props) => {\n  document.title = 'Trim Ryan';\n  const pageCount = ~~(props.blogList.length / pageSize) + 1;\n  const [pageNum, setPageNum] = useState(0);\n\n  return (<div className=\"blog-list\">\n    <div>\n      {\n        props.blogList\n        .slice(pageNum * pageSize, pageNum * pageSize + pageSize)\n        .map(blog => <BlogItem\n          key={blog.fileName}\n          markdownInfo={blog}\n        />)\n      }\n    </div>\n    <div className=\"control-group\">\n      <a\n        href=\"previous page\"\n        onClick={e => {\n          e.preventDefault();\n          if (pageNum !== 0) {\n            setPageNum(pageNum - 1);\n          }\n        }}\n      >‰∏ä‰∏ÄÈ°µ</a>\n      <span>{pageNum + 1} / {pageCount}</span>\n      <a\n        href=\"next page\"\n        onClick={e => {\n          e.preventDefault();\n          if (pageNum !== pageCount - 1) {\n            setPageNum(pageNum + 1);\n          }\n        }}\n      >‰∏ã‰∏ÄÈ°µ</a>\n    </div>\n  </div>);\n}\n\nexport default BlogList;\n","import React from 'react';\nimport ProfilePicture from './profile_picture.jpg';\nimport GitHubIcon from './github.svg';\nimport './Profile.css';\n\nconst Profile: React.FC = () => {\n\n  return <div className=\"profile\">\n    <div className=\"profile-picture\">\n      <img src={ProfilePicture} alt=\"Profile\" />\n    </div>\n    <h3>Â¥îÊòéËøú/Trim Ryan</h3>\n    JavaScriptÂ•Ω‰ΩøÔºÅ\n    <div className=\"link-list\">\n      <a href=\"https://github.com/angryshhh\">\n        <img src={GitHubIcon} alt=\"github\" />\n        angryshhh\n      </a>\n    </div>\n    <div className=\"profile-footer\">¬© Â¥îÊòéËøú Powered By Trim Ryan</div>\n  </div>;\n};\n\nexport default Profile;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport Markdown from './components/Markdown';\nimport BlogList from './components/BlogList';\nimport Profile from './components/Profile';\nimport './App.css';\n\ninterface MarkdownInfo {\n  fileName: string;\n  time: string;\n  title: string;\n  tags: string[];\n}\n\ninterface SiteData {\n  blogList: MarkdownInfo[],\n  tags: string[];\n}\n\nconst rootPath = `/${window.location.pathname.indexOf('my-blog') > -1 ? 'my-blog/' : ''}`;\n\nconst App: React.FC = () => {\n  const [blogList, setBlogList] = useState(new Array<MarkdownInfo>());\n\n  useEffect(() => {\n    fetch(`${rootPath}siteData.json`)\n    .then((response => response.json()))\n    .then((json: SiteData) => {\n      setBlogList(json.blogList);\n      console.log('tags:' + json.tags);\n    })\n    .catch(err => console.log(err));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Profile />\n      <Switch>\n        <Route exact path={rootPath}>\n          <BlogList blogList={blogList} />\n        </Route>\n        <Route path={`${rootPath}:fileName`} children={<Markdown />} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App /> \n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}